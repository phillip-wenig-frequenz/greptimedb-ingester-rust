// Copyright 2023 Greptime Team
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Table Data Provider trait and utilities for benchmarking
//!
//! This module provides the core TableDataProvider trait that defines the interface
//! for generating benchmark data, following the Java implementation pattern.

use greptimedb_ingester::table::{Row, TableSchema};
use greptimedb_ingester::Result;

/// Trait for table data providers that generate synthetic data for benchmarking
///
/// This trait follows the Java TableDataProvider interface design, providing
/// a common interface for different types of data generators.
pub trait TableDataProvider {
    /// Initialize the data provider
    /// This method is called before data generation begins
    fn init(&mut self) -> Result<()> {
        Ok(())
    }

    /// Get the table schema that this provider generates data for
    fn table_schema(&self) -> TableSchema;

    /// Get an iterator over the rows generated by this provider
    /// Returns None when no more data can be generated
    fn rows(&mut self) -> Box<dyn Iterator<Item = Row> + '_>;

    /// Get the total number of rows this provider will generate
    fn row_count(&self) -> usize;

    /// Cleanup resources (follows AutoCloseable pattern from Java)
    fn close(&mut self) -> Result<()> {
        Ok(())
    }
}
